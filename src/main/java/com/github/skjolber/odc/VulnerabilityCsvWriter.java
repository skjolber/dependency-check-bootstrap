package com.github.skjolber.odc;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.owasp.dependencycheck.data.nvd.json.BaseMetricV2;
import org.owasp.dependencycheck.data.nvd.json.BaseMetricV3;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;

import com.opencsv.CSVWriter;

public class VulnerabilityCsvWriter {

	private final Map<String, Integer> ids;
	private final IdGenerator idGenerator;
	
	private CSVWriter v2v3; 
	private CSVWriter v2; 
	private CSVWriter v3; 
	private CSVWriter plain;

	private Path v2v3File;
	private Path v3File;
	private Path v2File;
	private Path plainFile;
	
	private Path directory;
	
	public VulnerabilityCsvWriter(Path directory, IdGenerator id) {
		this.directory = directory;
		this.idGenerator = id;
		this.ids = new HashMap<>(16 * 1024);
		
		v2v3File = directory.resolve("owasp.vulnerability.v2v3.csv");
        v3File = directory.resolve("owasp.vulnerability.v3.csv");
        v2File = directory.resolve("owasp.vulnerability.v2.csv");
        plainFile = directory.resolve("owasp.vulnerability.plain.csv");
	}

	public int write(DefCveItem cve, String description) {
        int identifier;
        if (cve.getImpact().getBaseMetricV2() != null && cve.getImpact().getBaseMetricV3() != null) {
            String[] content = new String[21];
            content[1] = cve.getCve().getCVEDataMeta().getId();
            content[2] = description;

            final BaseMetricV2 cvssv2 = cve.getImpact().getBaseMetricV2();

            content[3] = Float.toString(cvssv2.getCvssV2().getBaseScore().floatValue());
            content[4] = cvssv2.getCvssV2().getAccessVector().value();
            content[5] = cvssv2.getCvssV2().getAccessComplexity().value();
            content[6] = cvssv2.getCvssV2().getAuthentication().value();
            content[7] = cvssv2.getCvssV2().getConfidentialityImpact().value();
            content[8] = cvssv2.getCvssV2().getIntegrityImpact().value();
            content[9] = cvssv2.getCvssV2().getAvailabilityImpact().value();
            content[10] = cvssv2.getSeverity();
                
            final BaseMetricV3 cvssv3 = cve.getImpact().getBaseMetricV3();
            
            content[11] = cvssv3.getCvssV3().getAttackVector().value();
            content[12] = cvssv3.getCvssV3().getAttackComplexity().value();
            content[13] = cvssv3.getCvssV3().getPrivilegesRequired().value();
            content[14] = cvssv3.getCvssV3().getUserInteraction().value();
            content[15] = cvssv3.getCvssV3().getScope().value();
            content[16] = cvssv3.getCvssV3().getConfidentialityImpact().value();
            content[17] = cvssv3.getCvssV3().getIntegrityImpact().value();
            content[18] = cvssv3.getCvssV3().getAvailabilityImpact().value();
            content[19] = Float.toString(cvssv3.getCvssV3().getBaseScore().floatValue());
            content[20] = cvssv3.getCvssV3().getBaseSeverity().value();
            
            identifier = idGenerator.next();
            content[0] = Integer.toString(identifier);
            if(ids.put(content[1], identifier) != null) {
            	throw new IllegalArgumentException(content[1]);
            } else {
            	v2v3.writeNext(content);
            }
        } else if (cve.getImpact().getBaseMetricV2() != null) {

            String[] content = new String[11];
            content[1] = cve.getCve().getCVEDataMeta().getId();
            content[2] = description;

            final BaseMetricV2 cvssv2 = cve.getImpact().getBaseMetricV2();

            content[3] = Float.toString(cvssv2.getCvssV2().getBaseScore().floatValue());
            content[4] = cvssv2.getCvssV2().getAccessVector().value();
            content[5] = cvssv2.getCvssV2().getAccessComplexity().value();
            content[6] = cvssv2.getCvssV2().getAuthentication().value();
            content[7] = cvssv2.getCvssV2().getConfidentialityImpact().value();
            content[8] = cvssv2.getCvssV2().getIntegrityImpact().value();
            content[9] = cvssv2.getCvssV2().getAvailabilityImpact().value();
            content[10] = cvssv2.getSeverity();
            
            identifier = idGenerator.next();
            content[0] = Integer.toString(identifier);
            if(ids.put(content[1], identifier) != null) {
            	throw new IllegalArgumentException(content[1]);
            } else {
            	v2.writeNext(content);
            }
        } else if (cve.getImpact().getBaseMetricV3() != null) {

            String[] content = new String[13];
            content[1] = cve.getCve().getCVEDataMeta().getId();
            content[2] = description;
                
            final BaseMetricV3 cvssv3 = cve.getImpact().getBaseMetricV3();
            
            content[3] = cvssv3.getCvssV3().getAttackVector().value();
            content[4] = cvssv3.getCvssV3().getAttackComplexity().value();
            content[5] = cvssv3.getCvssV3().getPrivilegesRequired().value();
            content[6] = cvssv3.getCvssV3().getUserInteraction().value();
            content[7] = cvssv3.getCvssV3().getScope().value();
            content[8] = cvssv3.getCvssV3().getConfidentialityImpact().value();
            content[9] = cvssv3.getCvssV3().getIntegrityImpact().value();
            content[10] = cvssv3.getCvssV3().getAvailabilityImpact().value();
            content[11] = Float.toString(cvssv3.getCvssV3().getBaseScore().floatValue());
            content[12] = cvssv3.getCvssV3().getBaseSeverity().value();
            
            identifier = idGenerator.next();
            content[0] = Integer.toString(identifier);
            if(ids.put(content[1], identifier) != null) {
            	throw new IllegalArgumentException(content[1]);
            } else {
            	v3.writeNext(content);
            }
        } else {
            String[] content = new String[3];
            content[1] = cve.getCve().getCVEDataMeta().getId();
            content[2] = description;

            identifier = idGenerator.next();
            content[0] = Integer.toString(identifier);
            if(ids.put(content[1], identifier) != null) {
            	throw new IllegalArgumentException(content[1]);
            } else {
            	plain.writeNext(content);
            }
        }
        return identifier;
        
	}
	
	public void open() throws IOException {
        v2v3 = new CSVWriter(Files.newBufferedWriter(v2v3File, StandardCharsets.UTF_8));
        v2v3.writeNext(new String[]{"id", "cve", "description", "cvssV2Score", "cvssV2AccessVector", "cvssV2AccessComplexity", "cvssV2Authentication", "cvssV2ConfidentialityImpact", "cvssV2IntegrityImpact", "cvssV2AvailabilityImpact", "cvssV2Severity", "cvssV3AttackVector", "cvssV3AttackComplexity", "cvssV3PrivilegesRequired", "cvssV3UserInteraction", "cvssV3Scope", "cvssV3ConfidentialityImpact", "cvssV3IntegrityImpact", "cvssV3AvailabilityImpact", "cvssV3BaseScore", "cvssV3BaseSeverity"});
        
        v3 = new CSVWriter(Files.newBufferedWriter(v3File, StandardCharsets.UTF_8));
        v3.writeNext(new String[]{"id", "cve", "description", "cvssV3AttackVector", "cvssV3AttackComplexity", "cvssV3PrivilegesRequired", "cvssV3UserInteraction", "cvssV3Scope", "cvssV3ConfidentialityImpact", "cvssV3IntegrityImpact", "cvssV3AvailabilityImpact", "cvssV3BaseScore", "cvssV3BaseSeverity"});

        v2 = new CSVWriter(Files.newBufferedWriter(v2File, StandardCharsets.UTF_8));
        v2.writeNext(new String[]{"id", "cve", "description", "cvssV2Score", "cvssV2AccessVector", "cvssV2AccessComplexity", "cvssV2Authentication", "cvssV2ConfidentialityImpact", "cvssV2IntegrityImpact", "cvssV2AvailabilityImpact", "cvssV2Severity"});

        plain = new CSVWriter(Files.newBufferedWriter(plainFile, StandardCharsets.UTF_8));
        plain.writeNext(new String[]{"id", "cve", "description"});
	}
	
	public void close() throws IOException {
		if(v2v3 != null) {
			v2v3.close(); 
		}
		if(v2 != null) {
			v2.close(); 
		}
		if(v3 != null) {
			v3.close(); 
		}
		if(plain != null) {
			plain.close(); 
		}
	}
	
	public Map<String, Integer> getIds() {
		return ids;
	}
	
	public String getSql()  {
		try {
			return String.format(IOUtils.toString(getClass().getResourceAsStream("/sql/vulnerability.sql"), StandardCharsets.UTF_8), directory.toAbsolutePath().toString());
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
}
